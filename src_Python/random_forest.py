# -*- coding: utf-8 -*-
"""Random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n_EKjh8533YjWTAOZvX2gop36gDsNh5R
"""

# Import required libraries

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# Read the csv

pulsar_stars = pd.read_csv("pulsar_stars.csv", delimiter=",")
pulsar_stars.head()

# Print the columns

pulsar_stars.columns

# Trim the column names (remove leading/trailing whitespaces).

trimmed_columns = [x.strip() for x in pulsar_stars.columns]
pulsar_stars.columns = trimmed_columns
pulsar_stars.columns

# Rename columns

pulsar_stars.columns = [
  "mean",
  "stand_deviation",
  "kurtosis",
  "skewness",
  "mean_DM.SNR",
  "stand_deviation_DM.SNR",
  "kurtosis_DM.SNR",
  "skewness_DM.SNR",
  "class",
]
pulsar_stars.head()

# Defining training variables, we're taking all the columns
# except the last two (skewness_DM.SNR and class)

pulsar_stars2 = pulsar_stars.iloc[:, :-2]
pulsar_stars2.columns

# Creating train and test sets

train, test, train_labels, test_labels = train_test_split(
    pulsar_stars2, 
    pulsar_stars2.iloc[:, -2:],
    train_size=0.75, 
    random_state=42
)

print(f"Train size: {len(train)}.\nTest size: {len(test)}.")

# Initializing Random Forest Regressor and training the model.

rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)
rf.fit(train, train_labels)

# Predict the test set

predictions = rf.predict(test)

# Calculate the absolute errors
errors = abs(predictions - test_labels)

# Print out the mean absolute error (mae), it shows how the average estimate is off by the real value.
print(f'Mean Absolute Error of "{errors.columns[0]}":', round(np.mean(errors.iloc[:, 0]), 2))
print(f'Mean Absolute Error of "{errors.columns[1]}":', round(np.mean(errors.iloc[:, 1]), 2))

# Calculate mean absolute percentage error (MAPE)
mape = 100 * (errors / test_labels)

# Calculate and display accuracy
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')